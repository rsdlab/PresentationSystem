// -*- C++ -*-
/*!
 * @file  SeedUpperBodyController.cpp
 * @brief SeedUpperBodyController
 * @date $Date$
 *
 * $Id$
 */

#include "SeedUpperBodyController.h"
#include <math.h>

// Module specification
// <rtc-template block="module_spec">
static const char* seedupperbodycontroller_spec[] =
  {
    "implementation_id", "SeedUpperBodyController",
    "type_name",         "SeedUpperBodyController",
    "description",       "SeedUpperBodyController",
    "version",           "1.0.0",
    "vendor",            "rsdlab",
    "category",          "Category",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
SeedUpperBodyController::SeedUpperBodyController(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_RightManipulatorCommonInterface_CommonPort("RightManipulatorCommonInterface_Common"),
    m_RightManipulatorCommonInterface_MiddlePort("RightManipulatorCommonInterface_Middle"),
    m_LeftManipulatorCommonInterface_CommonPort("LeftManipulatorCommonInterface_Common"),
    m_LeftManipulatorCommonInterface_MiddlePort("LeftManipulatorCommonInterface_Middle"),
    m_WaistInterfacePort("WaistInterface"),
    m_NeckInterfacePort("NeckInterface"),
    m_LifterPosePort("LifterPose"),
    m_RightArmKinematicsInterfacePort("RightArmKinematicsInterface"),
    m_LeftArmKinematicsInterfacePort("LeftArmKinematicsInterface"),
    m_PathAndMotionGeneratorInterfacePort("PathAndMotionGeneratorInterface"),
    m_actionmanagePort("actionmanage")

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
SeedUpperBodyController::~SeedUpperBodyController()
{
}



RTC::ReturnCode_t SeedUpperBodyController::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  
  // Set OutPort buffer
  
  // Set service provider to Ports
  m_actionmanagePort.registerProvider("ActionManage", "Action::ActionManage", m_ActionManageProvider);
  
  // Set service consumers to Ports
  m_RightManipulatorCommonInterface_CommonPort.registerConsumer("ManipulatorCommonInterface_Common", "JARA_ARM::ManipulatorCommonInterface_Common", m_ManipulatorCommonInterface_Common);
  m_RightManipulatorCommonInterface_MiddlePort.registerConsumer("ManipulatorCommonInterface_Middle", "JARA_ARM::ManipulatorCommonInterface_Middle", m_ManipulatorCommonInterface_Middle);
  m_LeftManipulatorCommonInterface_CommonPort.registerConsumer("LeftManipulatorCommonInterface_Common", "JARA_ARM_LEFT::LeftManipulatorCommonInterface_Common", m_LeftManipulatorCommonInterface_Common);
  m_LeftManipulatorCommonInterface_MiddlePort.registerConsumer("LeftManipulatorCommonInterface_Middle", "JARA_ARM_LEFT::LeftManipulatorCommonInterface_Middle", m_LeftManipulatorCommonInterface_Middle);
  m_WaistInterfacePort.registerConsumer("WaistInterface", "WaistNeck::WaistInterface", m_WaistInterface);
  m_NeckInterfacePort.registerConsumer("NeckInterface", "WaistNeck::NeckInterface", m_NeckInterface);
  m_LifterPosePort.registerConsumer("lifter", "SeedNoid_Lifter::LifterPoseInterface", m_lifter);
  m_RightArmKinematicsInterfacePort.registerConsumer("RightArmKinematicsInterface", "IK_RTC::RightArmKinematicsInterface", m_RightArmKinematicsInterface);
  m_LeftArmKinematicsInterfacePort.registerConsumer("LeftArmKinematicsInterface", "IK_RTC::LeftArmKinematicsInterface", m_LeftArmKinematicsInterface);
  m_PathAndMotionGeneratorInterfacePort.registerConsumer("PathAndMotionGeneratorInterface", "Manipulation::PathAndMotionGeneratorInterface", m_PathAndMotionGeneratorInterface);
  
  // Set CORBA Service Ports
  addPort(m_RightManipulatorCommonInterface_CommonPort);
  addPort(m_RightManipulatorCommonInterface_MiddlePort);
  addPort(m_LeftManipulatorCommonInterface_CommonPort);
  addPort(m_LeftManipulatorCommonInterface_MiddlePort);
  addPort(m_WaistInterfacePort);
  addPort(m_NeckInterfacePort);
  addPort(m_LifterPosePort);
  addPort(m_RightArmKinematicsInterfacePort);
  addPort(m_LeftArmKinematicsInterfacePort);
  addPort(m_PathAndMotionGeneratorInterfacePort);
  addPort(m_actionmanagePort);
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // </rtc-template>
  
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t SeedUpperBodyController::onFinalize()
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SeedUpperBodyController::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SeedUpperBodyController::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/


RTC::ReturnCode_t SeedUpperBodyController::onActivated(RTC::UniqueId ec_id)
{
  //プロバイダより遅くActivateするため
  sleep(1);
  return RTC::RTC_OK;
}


RTC::ReturnCode_t SeedUpperBodyController::onDeactivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t SeedUpperBodyController::onExecute(RTC::UniqueId ec_id)
{
  int c;
  struct timeval sumstart;
  struct timeval sumend;
  struct timeval start;
  struct timeval end;
  struct timeval now;
  double sec;
  double micro;
  double duration;
  FILE *fp1;

  if (m_ActionManageProvider.Flag == 1){
    //RightArm
    if (m_ActionManageProvider.selectarm == 0){
	  JARA_ARM::ManipInfo_var minfovar;
	  JARA_ARM::ManipInfo minfo;
	  JARA_ARM::JointPos jointPoint;
	  m_ManipulatorCommonInterface_Common->getManipInfo(minfovar);
	  minfo=minfovar;
	  jointPoint.length(minfo.axisNum);
	  jointPoint[0] = m_ActionManageProvider.arm0;
	  jointPoint[1] = m_ActionManageProvider.arm1;
	  jointPoint[2] = m_ActionManageProvider.arm2;
	  jointPoint[3] = m_ActionManageProvider.arm3;
	  jointPoint[4] = m_ActionManageProvider.arm4;
	  jointPoint[5] = m_ActionManageProvider.arm5;
	  jointPoint[6] = m_ActionManageProvider.arm6;
	  m_rid_right=m_ManipulatorCommonInterface_Middle->movePTPJointAbs(jointPoint);
	  
	  JARA_ARM::ULONG angleRatio;
	  angleRatio = m_ActionManageProvider.handpara;
	  m_rid_right=m_ManipulatorCommonInterface_Middle->moveGripper(angleRatio);

	  WaistNeck::NeckPos neckPoint;
	  neckPoint.length(3);
	  //頭ヨー(回転)-90~90
	  neckPoint[0] = m_ActionManageProvider.neckyoo;
	  //頭ピッチ(前後)-20~+60
	  neckPoint[1] = m_ActionManageProvider.neckpich;
	  //頭ロール(左右)-20~+20
	  neckPoint[2] = m_ActionManageProvider.neckrole;
	  m_rid_neck=m_NeckInterface->movePTPNeckAbs(neckPoint);
	  
	  WaistNeck::WaistPos waistPoint;
	  waistPoint.length(3);
	  //腰ヨー(回転)-90~90
	  waistPoint[0] = m_ActionManageProvider.waistyoo;
	  //腰ピッチ(前後)-9~+39
	  waistPoint[1] = m_ActionManageProvider.waistpich;
	  //腰ロール(左右)-9~+9
	  waistPoint[2] = m_ActionManageProvider.waistrole;
	  m_rid_waist=m_WaistInterface->movePTPWaistAbs(waistPoint);
	  
	  if(m_rid_waist->id != 0){//Error
	    std::cout<<"movePTPWaistAbs ERROR"<<std::endl;
	    std::cout<<m_rid_waist->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_neck->id != 0){//Error
	    std::cout<<"movePTPNeckAbs ERROR"<<std::endl;
	    std::cout<<m_rid_neck->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_right->id != 0){//Error
	    std::cout<<"moveGripper ERROR"<<std::endl;
	    std::cout<<m_rid_right->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_right->id != 0){//Error
	    std::cout<<"movePTPJointAbs ERROR"<<std::endl;
	    std::cout<<m_rid_right->comment<<std::endl<<std::endl;
	  }
	  m_ActionManageProvider.Flag = 0;
	}
    //LeftArm
    if (m_ActionManageProvider.selectarm == 1){
          JARA_ARM_LEFT::ManipInfo_var minfovar;
	  JARA_ARM_LEFT::ManipInfo minfo;
	  JARA_ARM_LEFT::JointPos jointPoint;
	  m_LeftManipulatorCommonInterface_Common->getManipInfo(minfovar);
	  minfo=minfovar;
	  jointPoint.length(minfo.axisNum);
	  jointPoint[0] = m_ActionManageProvider.arm0;
	  jointPoint[1] = m_ActionManageProvider.arm1;
	  jointPoint[2] = m_ActionManageProvider.arm2;
	  jointPoint[3] = m_ActionManageProvider.arm3;
	  jointPoint[4] = m_ActionManageProvider.arm4;
	  jointPoint[5] = m_ActionManageProvider.arm5;
	  jointPoint[6] = m_ActionManageProvider.arm6;
	  m_rid_left=m_LeftManipulatorCommonInterface_Middle->movePTPJointAbs(jointPoint);

	  JARA_ARM_LEFT::ULONG angleRatio;
	  angleRatio = m_ActionManageProvider.handpara;
	  m_rid_left=m_LeftManipulatorCommonInterface_Middle->moveGripper(angleRatio);
	  
	  WaistNeck::NeckPos neckPoint;
	  neckPoint.length(3);
	  //頭ヨー(回転)-90~90
	  neckPoint[0] = m_ActionManageProvider.neckyoo;
	  //頭ピッチ(前後)-20~+60
	  neckPoint[1] = m_ActionManageProvider.neckpich;
	  //頭ロール(左右)-20~+20
	  neckPoint[2] = m_ActionManageProvider.neckrole;
	  m_rid_neck=m_NeckInterface->movePTPNeckAbs(neckPoint);
	  
	  WaistNeck::WaistPos waistPoint;
	  waistPoint.length(3);
	  //腰ヨー(回転)-90~90
	  waistPoint[0] = m_ActionManageProvider.waistyoo;
	  //腰ピッチ(前後)-9~+39
	  waistPoint[1] = m_ActionManageProvider.waistpich;
	  //腰ロール(左右)-9~+9
	  waistPoint[2] = m_ActionManageProvider.waistrole;
	  m_rid_waist=m_WaistInterface->movePTPWaistAbs(waistPoint);
	  
	  if(m_rid_left->id != 0){//Error
	    std::cout<<"movePTPJointAbs ERROR"<<std::endl;
	    std::cout<<m_rid_left->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_left->id != 0){//Error
	    std::cout<<"moveGripper ERROR"<<std::endl;
	    std::cout<<m_rid_left->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_right->id != 0){//Error
	    std::cout<<"moveGripper ERROR"<<std::endl;
	    std::cout<<m_rid_right->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_right->id != 0){//Error
	    std::cout<<"movePTPJointAbs ERROR"<<std::endl;
	    std::cout<<m_rid_right->comment<<std::endl<<std::endl;
	  }
	  m_ActionManageProvider.Flag = 0;
	}
    //BothArm
    if (m_ActionManageProvider.selectarm == 2){
          //RightArm
          JARA_ARM::ManipInfo_var Rminfovar;
	  JARA_ARM::ManipInfo Rminfo;
	  JARA_ARM::JointPos RjointPoint;
	  m_ManipulatorCommonInterface_Common->getManipInfo(Rminfovar);
	  Rminfo = Rminfovar;
	  RjointPoint.length(Rminfo.axisNum);
	  RjointPoint[0] = m_ActionManageProvider.arm0;
	  RjointPoint[1] = m_ActionManageProvider.arm1;
	  RjointPoint[2] = m_ActionManageProvider.arm2;
	  RjointPoint[3] = m_ActionManageProvider.arm3;
	  RjointPoint[4] = m_ActionManageProvider.arm4;
	  RjointPoint[5] = m_ActionManageProvider.arm5;
	  RjointPoint[6] = m_ActionManageProvider.arm6;
	  m_rid_right=m_ManipulatorCommonInterface_Middle->movePTPJointAbs(RjointPoint);
	  
	  JARA_ARM::ULONG RangleRatio;
	  RangleRatio = m_ActionManageProvider.handpara;
	  m_rid_right=m_ManipulatorCommonInterface_Middle->moveGripper(RangleRatio);

	  //LeftArm
          JARA_ARM_LEFT::ManipInfo_var Lminfovar;
	  JARA_ARM_LEFT::ManipInfo Lminfo;
	  JARA_ARM_LEFT::JointPos LjointPoint;
	  m_LeftManipulatorCommonInterface_Common->getManipInfo(Lminfovar);
	  Lminfo = Lminfovar;
	  LjointPoint.length(Lminfo.axisNum);
	  LjointPoint[0] = m_ActionManageProvider.arm0;
	  LjointPoint[1] = m_ActionManageProvider.arm1;
	  LjointPoint[2] = m_ActionManageProvider.arm2;
	  LjointPoint[3] = m_ActionManageProvider.arm3;
	  LjointPoint[4] = m_ActionManageProvider.arm4;
	  LjointPoint[5] = m_ActionManageProvider.arm5;
	  LjointPoint[6] = m_ActionManageProvider.arm6;
	  m_rid_left=m_LeftManipulatorCommonInterface_Middle->movePTPJointAbs(LjointPoint);

	  JARA_ARM_LEFT::ULONG LangleRatio;
	  LangleRatio = m_ActionManageProvider.handpara;
	  m_rid_left=m_LeftManipulatorCommonInterface_Middle->moveGripper(LangleRatio);

	  WaistNeck::NeckPos neckPoint;
	  neckPoint.length(3);
	  //頭ヨー(回転)-90~90
	  neckPoint[0] = m_ActionManageProvider.neckyoo;
	  //頭ピッチ(前後)-20~+60
	  neckPoint[1] = m_ActionManageProvider.neckpich;
	  //頭ロール(左右)-20~+20
	  neckPoint[2] = m_ActionManageProvider.neckrole;
	  m_rid_neck=m_NeckInterface->movePTPNeckAbs(neckPoint);
	  
	  WaistNeck::WaistPos waistPoint;
	  waistPoint.length(3);
	  //腰ヨー(回転)-90~90
	  waistPoint[0] = m_ActionManageProvider.waistyoo;
	  //腰ピッチ(前後)-9~+39
	  waistPoint[1] = m_ActionManageProvider.waistpich;
	  //腰ロール(左右)-9~+9
	  waistPoint[2] = m_ActionManageProvider.waistrole;
	  m_rid_waist=m_WaistInterface->movePTPWaistAbs(waistPoint);
	  
	  if(m_rid_left->id != 0){//Error
	    std::cout<<"movePTPJointAbs ERROR"<<std::endl;
	    std::cout<<m_rid_left->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_left->id != 0){//Error
	    std::cout<<"moveGripper ERROR"<<std::endl;
	    std::cout<<m_rid_left->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_right->id != 0){//Error
	    std::cout<<"moveGripper ERROR"<<std::endl;
	    std::cout<<m_rid_right->comment<<std::endl<<std::endl;
	  }
	  if(m_rid_right->id != 0){//Error
	    std::cout<<"movePTPJointAbs ERROR"<<std::endl;
	    std::cout<<m_rid_right->comment<<std::endl<<std::endl;
	  }
	  m_ActionManageProvider.Flag = 0;
	}

    else
      std::cout << "csvDataError" << std::endl;
  }
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t SeedUpperBodyController::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SeedUpperBodyController::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SeedUpperBodyController::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SeedUpperBodyController::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t SeedUpperBodyController::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/************************************************

	void TransRot(double eerot[],double roll,double pitch,double yaw)
	
	概要：ロールピッチヨー[deg]から先端姿勢の回転行列を求める

	引数：
　　　　　　　double eerot[]・・・計算した行列を格納する配列
                                 |0 1 2|
                                 |3 4 5|
                                 |6 7 8|
             double roll・・・ロール回転角度
             double pitch・・・ピッチ回転角度
             double yaw・・・ヨー回転角度

	戻り値：なし

*************************************************/
void SeedUpperBodyController::TransRot(double eerot[],double roll,double pitch,double yaw)
{
  //ロールピッチヨー　ロボット工学（遠山茂樹著）p25
  double Rrotx;
  double Rroty;
  double Rrotz;
  Rrotx = roll * M_PI / 180;
  Rroty = pitch * M_PI / 180;
  Rrotz = yaw * M_PI / 180;
  //std::cout << "Rrtx = " << Rrotx << std::endl;
  //std::cout << "Rrty = " << Rroty << std::endl;
  //std::cout << "Rrtz = " << Rrotz << std::endl;
  eerot[0] = cos(Rroty)*cos(Rrotz);
  eerot[1] = cos(Rrotz)*sin(Rroty)*sin(Rrotx)-sin(Rrotz)*cos(Rrotx);
  eerot[2] = cos(Rrotz)*sin(Rroty)*cos(Rrotx)+sin(Rrotz)*sin(Rrotx);
  eerot[3] = sin(Rrotz)*cos(Rroty);
  eerot[4] = sin(Rrotz)*sin(Rroty)*sin(Rrotx)+cos(Rrotz)*cos(Rrotx);
  eerot[5] = sin(Rrotz)*sin(Rroty)*cos(Rrotx)-cos(Rrotz)*sin(Rrotx);
  eerot[6] = -sin(Rroty);
  eerot[7] = cos(Rroty)*sin(Rrotx);
  eerot[8] = cos(Rroty)*cos(Rrotx);
  //for(int j=0;j<9;j++){
  //    printf("eerot[%d] = %f\n",j,eerot[j]);
  //}

}


/************************************************

        Frame Solve_Rot(double eerot[]);
	
	概要：先端姿勢の回転行列から、ロールピッチヨー[deg]を求める

	引数：
　　　　　　　double eerot[]・・・姿勢行列を格納する配列
                                 |0 1 2|
                                 |3 4 5|
                                 |6 7 8|

	戻り値：姿勢（ロールピッチヨー）

*************************************************/
Frame SeedUpperBodyController::Solve_Rot(double eerot[])
{
  Frame rotation;
  double phi;//φ
  double theta;//θ
  double psi;//ψ

  for(int i=0;i<9;i++)
    {
      if(eerot[i]>1)
	eerot[i] = 1;
      if(eerot[i]<-1)
	eerot[i] = -1;
    }

  psi = atan2(eerot[3], eerot[0]);
  theta =  atan2(-eerot[6], sqrt(eerot[7]*eerot[7]+eerot[8]*eerot[8]));
  phi = atan2(eerot[7], eerot[8]);  

  //phi = atan2(eerot[3], eerot[0]);
  //theta =  asin(-eerot[6]);
  //psi = atan2(eerot[7], eerot[8]);  

  rotation.roll = phi*180/M_PI;
  rotation.pitch = theta*180/M_PI;
  rotation.yaw = psi*180/M_PI;

  return rotation;
}


extern "C"
{
 
  void SeedUpperBodyControllerInit(RTC::Manager* manager)
  {
    coil::Properties profile(seedupperbodycontroller_spec);
    manager->registerFactory(profile,
                             RTC::Create<SeedUpperBodyController>,
                             RTC::Delete<SeedUpperBodyController>);
  }
  
};
